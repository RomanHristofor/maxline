{"version":3,"sources":["components/translations lazy /^/.//.*/.country/.json$/ groupOptions: {} namespace object","constants.js","reducer/filters.js","helpers.js","reducer/countries.js","reducer/languages.js","reducer/index.js","store/index.js","middlewares/api.js","components/css.js","components/common/LanguageToggle.js","AC/index.js","components/Filters/countries.js","components/Filters/CountryCode.js","components/Country.js","selectors/index.js","components/Filters/Input.js","components/Filters/Pagination.js","components/common/Loader.js","components/common/NotFound.js","components/Countries.js","components/Routes.js","components/App.js","serviceWorker.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","START","SUCCESS","FAIL","HOST","defaultFilters","countryName","pagination","page","pageSize","extendsItemInCountries","countries","type","entities","item","i","toString","response","q","toLowerCase","request","getLocalStorage","length","setLocalStorage","setInitialRequest","findRequest","filter","idx","findIndex","splice","push","setRequestInLocalStorage","localStorage","setItem","JSON","stringify","key","parse","getItem","getRequestInLocalStorage","find","pushItemInCountries","status","message","removeItemInLocalStorage","Array","isArray","addTranslationsForActiveLanguage","lang","fn","translations","replaceLanguageStorage","stateLanguages","localStorageLang","a","active","revertItemActive","getActiveLanguageInLocalStorage","activeStorageLang","reducerState","loading","loaded","error","country","isChecked","reducerLangState","languages","name","translation","options","renderToStaticMarkup","combineReducers","localize","localizeReducer","state","action","payload","filters","enhancer","applyMiddleware","thunk","store","next","callAPI","rest","setTimeout","fetch","res","json","catch","createStore","reducer","window","Wrap","styled","div","Title","h2","props","primary","css","InputLabel","label","RadioGroup","LanguageWrap","Link","ListWrap","CountryInfo","display","CountryFlag","img","Main","TableCode","table","LanguageToggle","getClass","languageCode","activeLang","activeLanguage","handlerSetLang","setActiveLangInStorage","setActiveLanguage","changeLanguageStorage","this","className","onClick","Component","connect","withLocalize","CountryCodeList","scope","entries","Country","prevProps","addTranslationForLanguage","getBody","to","data","src","flag","alt","capital","region","subregion","population","demonym","area","gini","nativeName","numericCode","timezones","time","borders","border","currencies","currency","symbol","k","v","regionalBlocs","regional","cioc","ownProps","c","countryNameSelector","createSelector","countrySelector","countriesGetter","countriesSelector","countriesState","loadingSelector","errorSelector","filtratedCountriesSelector","slice","Input","dispatch","loadCountryByShortName","handleLoadCountry","inputFiltratedByName","getEntitiesInLocalStorage","str","target","value","handleFilter","loadCountryByFullName","loadCountryByCode","loadCountryByCurrency","changeCountryChecked","setState","defaultChecked","placeholder","onChange","includes","PaginationFilter","handlePageChange","changePages","countFiltratedByName","subStr","total","activePage","itemsCountPerPage","totalItemsCount","Loader","NotFound","Countries","loader","notFount","countryDetails","as","NavLink","Routes","getIndex","match","params","getListOfCodes","CountryCode","removeItem","initialize","path","render","exact","App","component","Boolean","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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ACN,GAAM,OACN,GAAM,aACN,GAAM,SACN,GAAM,iBACN,GAAM,UACN,GAAM,WACN,GAAM,WACN,GAAM,qBACN,GAAM,UACN,GAAM,QACN,GAAM,cACN,GAAM,oBACN,GAAM,UACN,GAAM,UACN,GAAM,WACN,GAAM,8BACN,GAAM,gBACN,GAAM,OACN,GAAM,UACN,GAAM,SACN,GAAM,mBACN,GAAM,QACN,GAAM,SACN,GAAM,UACN,GAAM,UACN,GAAM,QACN,GAAM,YACN,GAAM,SACN,GAAM,YACN,GAAM,UACN,GAAM,OACN,GAAM,YACN,GAAM,WACN,GAAM,SACN,GAAM,gBACN,GAAM,QACN,GAAM,WACN,GAAM,YACN,GAAM,UACN,GAAM,UACN,GAAM,QACN,GAAM,YACN,GAAM,4BACN,GAAM,OACN,GAAM,UACN,GAAM,cACN,GAAM,SACN,GAAM,QACN,GAAM,UACN,GAAM,QACN,GAAM,SACN,GAAM,SACN,GAAM,aACN,GAAM,QACN,GAAM,WACN,GAAM,cACN,GAAM,cACN,GAAM,SACN,GAAM,aACN,GAAM,mCACN,GAAM,SACN,GAAM,UACN,GAAM,UACN,GAAM,UACN,GAAM,QACN,GAAM,gBACN,GAAM,YACN,GAAM,aACN,GAAM,QACN,GAAM,wBACN,GAAM,aACN,GAAM,SACN,GAAM,WACN,GAAM,WACN,GAAM,OACN,GAAM,QACN,GAAM,mBACN,GAAM,aACN,GAAM,aACN,GAAM,YACN,GAAM,SACN,GAAM,kCACN,GAAM,sBACN,GAAM,SACN,GAAM,WACN,GAAM,aACN,GAAM,aACN,GAAM,UACN,GAAM,aACN,GAAM,UACN,GAAM,UACN,GAAM,QACN,GAAM,QACN,GAAM,cACN,GAAM,cACN,GAAM,YACN,GAAM,QACN,GAAM,UACN,GAAM,OACN,GAAM,iBACN,GAAM,2BACN,GAAM,SACN,GAAM,OACN,GAAM,WACN,GAAM,QACN,GAAM,wBACN,GAAM,SACN,GAAM,mBACN,GAAM,WACN,GAAM,OACN,GAAM,cACN,GAAM,WACN,GAAM,SACN,GAAM,WACN,GAAM,cACN,GAAM,QACN,GAAM,UACN,GAAM,UAC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","file":"static/js/main.58de122c.chunk.js","sourcesContent":["var map = {\n\t\"./en.country.json\": [\n\t\t63,\n\t\t3\n\t],\n\t\"./ru.country.json\": [\n\t\t64,\n\t\t4\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 3);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 55;\nmodule.exports = webpackAsyncContext;","export const LOAD_COUNTRY_BY_NAME = 'LOAD_COUNTRY_BY_NAME';\nexport const LOAD_COUNTRY_BY_FULL_NAME = 'LOAD_COUNTRY_BY_FULL_NAME';\nexport const LOAD_COUNTRY_BY_CODE = 'LOAD_COUNTRY_BY_CODE';\nexport const LOAD_COUNTRY_BY_CURRENCY = 'LOAD_COUNTRY_BY_CURRENCY';\n\nexport const INPUT_COUNTRY_NAME = 'INPUT_COUNTRY_NAME';\n\nexport const CHANGE_PAGES = 'CHANGE_PAGES';\nexport const CHANGE_COUNTRY_CHECKED = 'CHANGE_COUNTRY_CHECKED';\nexport const CHANGE_LANGUAGES_STORAGE = 'CHANGE_LANGUAGES_STORAGE';\n\nexport const GET_ENTITIES_IN_STORAGE = 'GET_ENTITIES_IN_STORAGE';\n\n\nexport const START = '_START';\nexport const SUCCESS = '_SUCCESS';\nexport const FAIL = '_FAIL';\n\nexport const HOST = 'https://restcountries.eu/rest/v2/';","import {\n    CHANGE_PAGES,\n    INPUT_COUNTRY_NAME\n} from '../constants'\n\nexport const defaultFilters = {\n    countryName: '',\n    pagination: {\n        page: 1,\n        pageSize: 10,\n    },\n};\n\n\nexport default (state = defaultFilters, action) => {\n    const {type, payload} = action;\n\n    switch (type) {\n        case INPUT_COUNTRY_NAME:\n            defaultFilters.countryName = payload;\n            return {...state, ...defaultFilters}\n\n        case CHANGE_PAGES:\n            return {...state, pagination: payload};\n\n        default:\n            return state\n    }\n}","import {defaultFilters} from \"./reducer/filters\"\n\nexport function extendsItemInCountries(countries, type) {\n    const entities = countries.map((item, i) => {\n        item.id = i.toString();\n        return item;\n    });\n    setRequestInLocalStorage(entities, type, true);\n    return entities;\n}\n\nexport function setRequestInLocalStorage(entities, type, response) {\n    const q = defaultFilters.countryName.toLowerCase();\n    let request = getLocalStorage('request') || [];\n\n    if (request.length === 0) {\n        request = setInitialRequest(type, response);\n    }\n\n    if (q && type && response) {\n        const findRequest = request.filter(\n            i => i.q === q && i.type === type && i.response === response\n        );\n\n        if (findRequest.length === 1) {\n            const idx = request.findIndex(\n                i => i.q === q && i.type === type && i.response === response\n            );\n            findRequest[0].entities = entities;\n            request.splice(idx, 1, findRequest[0]);\n            setLocalStorage(request);\n        }\n        if (findRequest.length === 0) {\n            request.push({q: q, type: type, response: response, entities: entities});\n            setLocalStorage(request);\n        }\n    }\n}\n\nexport function setInitialRequest(type, response) {\n    const q = defaultFilters.countryName.toLowerCase();\n    let request = {};\n    if (q && type && response) {\n        request.q = q;\n        request.type = type;\n        request.response = response;\n        setLocalStorage([request]);\n    }\n    return [request];\n}\n\nfunction setLocalStorage(request) {\n    localStorage.setItem('request', JSON.stringify(request));\n}\n\nexport function getLocalStorage(key) {\n    return JSON.parse(localStorage.getItem(key));\n}\n\nexport function getRequestInLocalStorage(q, type = 'LOAD_COUNTRY_BY_NAME_SUCCESS') {\n    const request = getLocalStorage('request');\n\n    if (request && request.length)\n        return request.find(i => i.q === q && i.type === type);\n}\n\nexport function pushItemInCountries(countries, response, type) {\n    if (!response.status && !response.message) {\n        if (Array.isArray(response)) {\n            return extendsItemInCountries(\n                response.filter(i => i !== null), type\n            );\n        }\n        countries = [];\n        countries.push(response);\n        return extendsItemInCountries(countries, type);\n    }\n    removeItemInLocalStorage(type);\n    return [];\n}\n\nexport function removeItemInLocalStorage(type) {\n    const request = getLocalStorage('request');\n    const q = defaultFilters.countryName;\n    const idx = request.findIndex(\n        i => i.q === q && i.type === type\n    );\n    if (idx !== -1)\n        request.splice(idx, 1);\n        setLocalStorage(request);\n}\n\nexport function addTranslationsForActiveLanguage(lang, fn) {\n    if (!lang) return;\n\n    import(`./components/translations/${lang.code}.country.json`)\n        .then(translations => {\n            fn(translations, lang.code)\n        });\n}\n\nexport function isIncludedSubstring(str, subStr) {\n    return str.toLowerCase().includes(subStr.toLowerCase());\n}\n\nexport function replaceLanguageStorage(stateLanguages, localStorageLang) {\n    const idx = stateLanguages.findIndex(a => !a.active);\n    const revertItemActive = stateLanguages.map(i => {\n        if (i.active)\n            i.active = !i.active;\n        return i;\n    });\n    revertItemActive.splice(idx, 1, localStorageLang);\n    localStorage.setItem('lang', JSON.stringify(revertItemActive));\n    // window.location.reload();\n    return revertItemActive;\n}\n\nexport function getActiveLanguageInLocalStorage() {\n    const activeStorageLang = getLocalStorage('lang');\n\n    if (activeStorageLang)\n        return activeStorageLang.find(i => i.active);\n}","import {extendsItemInCountries, removeItemInLocalStorage, pushItemInCountries} from '../helpers'\nimport {\n    START,\n    SUCCESS,\n    FAIL,\n    LOAD_COUNTRY_BY_NAME,\n    LOAD_COUNTRY_BY_FULL_NAME,\n    LOAD_COUNTRY_BY_CODE,\n    LOAD_COUNTRY_BY_CURRENCY,\n    GET_ENTITIES_IN_STORAGE,\n    CHANGE_COUNTRY_CHECKED\n} from '../constants'\n\n\nexport const reducerState = {\n    loading: false,\n    loaded: false,\n    error: '',\n    country: {\n        isChecked: 'shortName'\n    },\n    countries: []\n}\n\n\n\nexport default (state = reducerState, action) => {\n    const {type, response, payload} = action;\n    switch (type) {\n        case LOAD_COUNTRY_BY_NAME + START:\n        case LOAD_COUNTRY_BY_FULL_NAME + START:\n        case LOAD_COUNTRY_BY_CODE + START:\n        case LOAD_COUNTRY_BY_CURRENCY + START:\n            return {...state, loading: true};\n\n        case LOAD_COUNTRY_BY_NAME + SUCCESS:\n        case LOAD_COUNTRY_BY_FULL_NAME + SUCCESS:\n            return {\n                ...state,\n                countries: extendsItemInCountries(response, type),\n                error: '',\n                loading: false,\n                loaded: true\n            };\n\n        case LOAD_COUNTRY_BY_CODE + SUCCESS:\n        case LOAD_COUNTRY_BY_CURRENCY + SUCCESS:\n            return {\n                ...state,\n                countries: pushItemInCountries(state.countries, response, type),\n                error: '',\n                loading: false,\n                loaded: true\n            };\n\n        case GET_ENTITIES_IN_STORAGE:\n            return {\n                ...state,\n                countries: payload,\n            };\n\n        case CHANGE_COUNTRY_CHECKED:\n            return {\n                ...state,\n                country: payload,\n            };\n\n        case LOAD_COUNTRY_BY_NAME + FAIL:\n        case LOAD_COUNTRY_BY_FULL_NAME + FAIL:\n        case LOAD_COUNTRY_BY_CURRENCY + FAIL:\n            removeItemInLocalStorage(type);\n            return {\n                ...state,\n                countries: [],\n                error: 'Not found',\n                loading: false\n            };\n\n        default:\n            return state\n    }\n}","import {replaceLanguageStorage} from '../helpers';\nimport {renderToStaticMarkup} from 'react-dom/server';\nimport globalTranslations from '../components/translations/global.json';\nimport {\n    CHANGE_LANGUAGES_STORAGE,\n} from '../constants'\n\n\nexport const reducerLangState = {\n    languages: [\n        {name: 'EN', code: 'en', active: true},\n        {name: 'RU', code: 'ru'},\n    ],\n    translation: globalTranslations,\n    options: {renderToStaticMarkup}\n}\n\n\nexport default (state = reducerLangState, action) => {\n    const {type, payload} = action;\n\n    switch (type) {\n        case CHANGE_LANGUAGES_STORAGE:\n            return {\n                ...state,\n                languages: replaceLanguageStorage(state.languages, payload)\n            };\n\n        default:\n            return state\n    }\n}","import {combineReducers} from 'redux'\nimport { localizeReducer } from 'react-localize-redux';\n\nimport countries from './countries'\nimport filters from './filters'\nimport languages from './languages'\n\nexport default combineReducers({\n    localize: localizeReducer,\n    languages,\n    countries,\n    filters\n})","import {createStore, applyMiddleware} from 'redux'\nimport reducer from '../reducer'\nimport {api} from '../middlewares/api'\nimport thunk from 'redux-thunk'\n\nconst enhancer = applyMiddleware(thunk, api);\n\nconst store = createStore(reducer, {}, enhancer);\nwindow.store = store //only dev mode\n\nexport default store","import {START, SUCCESS, FAIL} from '../constants'\n\n\nexport const api = store => next => (action) => {\n\n    const {callAPI, type, ...rest} = action;\n    if (!callAPI) return next(action);\n\n    next({\n        ...rest,\n        type: type + START\n    });\n\n    setTimeout(() => {\n        fetch(callAPI)\n            .then(res => res.json())\n            .then(response => next({...rest, type: type + SUCCESS, response}))\n            .catch(error => next({...rest, type: type + FAIL, error}))\n    }, 500)\n}","import styled, {css} from 'styled-components';\n\nconst Wrap = styled.div`\n    margin-top: 50px;\n    margin-left: 50px;\n    @media (max-width: 576px) {\n      margin-top: 15px;\n      margin-left: 15px;\n    }\n`\nconst Title = styled.h2`\n    color: #FF6347;\n    margin-bottom: 20px;\n    ${(props) => props.primary && css`\n        color: palevioletred;\n    `}\n`\n\n// Start Input element\nconst InputLabel = styled.label`\n    display: block;\n`\nconst RadioGroup = styled.div`\n    margin-bottom: 18px;\n    @media (max-width: 576px) {\n        & label {\n          display: block;\n          margin-left: 0 !important;\n        }\n    }\n`\n// Finish Input element\n\nconst LanguageWrap = styled.div`\n    display: flex;\n    align-self: flex-start;\n    order: 1;\n    & button {\n        background-color: #eee;\n        box-shadow: none;\n        border: 1px solid #ccc;\n        padding: 10px 10px;\n        border-radius: 4px;\n        min-width: 50px;\n        transition: all 0.3s ease-out;\n    }\n    & button.active {\n        color: #333;\n        background-color: #FF6347; \n    }\n    @media (max-width: 576px) {\n        display: inline-block;\n        & button {\n            min-width: 45px;\n            height: 40px;\n        }\n    }\n`\n\nconst Link = styled.a``\nconst ListWrap = styled.div`\n    min-width: 280px;\n`\n\nconst CountryInfo = styled.div`\n    margin-bottom: 5px;\n    ${(props) => !props.display && css`\n        display: none;\n    `}\n`\n\nconst CountryFlag = styled.img`\n    width: 60px;\n    height: 40px;\n`\n\nconst Main = styled.div`\n    display: flex;\n`\n\nconst TableCode = styled.table``\n\nexport {\n    Wrap, Title, InputLabel, RadioGroup,\n    LanguageWrap,\n    Link, ListWrap, CountryFlag, CountryInfo,\n    Main, TableCode\n};","import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport {changeLanguageStorage} from '../../AC';\nimport { getActiveLanguageInLocalStorage } from '../../helpers';\nimport {withLocalize} from 'react-localize-redux';\nimport {LanguageWrap} from '../css';\n\nclass LanguageToggle extends Component {\n\n    getClass = (languageCode) => {\n        const activeLang = getActiveLanguageInLocalStorage();\n        if (activeLang)\n            return languageCode === activeLang.code ? 'active' : '';\n\n        return languageCode === this.props.activeLanguage.code ? 'active' : '';\n    };\n\n    handlerSetLang = (lang) => {\n        const activeLang = getActiveLanguageInLocalStorage();\n\n        if (activeLang && activeLang.code !== lang.code)\n            this.setActiveLangInStorage(lang);\n        if (!activeLang)\n            this.setActiveLangInStorage(lang);\n    }\n\n    setActiveLangInStorage = (lang) => {\n        const {setActiveLanguage, changeLanguageStorage} = this.props;\n\n        setActiveLanguage(lang.code);\n        const storageLang = {...lang, active: true};\n        changeLanguageStorage(storageLang);\n    }\n\n    render() {\n        const {languages} = this.props;\n\n        return (\n            <LanguageWrap>\n                {languages.map(lang =>\n                    <div key={lang.code}>\n                        <button className={`btn btn-outline-info ${this.getClass(lang.code)}`}\n                                onClick={() => this.handlerSetLang(lang)}>\n                            {lang.name}\n                        </button>\n                    </div>\n                )}\n            </LanguageWrap>\n        );\n    }\n};\n\nexport default connect(() => ({\n}), {changeLanguageStorage})(withLocalize(LanguageToggle))\n","import {\n    LOAD_COUNTRY_BY_NAME,\n    LOAD_COUNTRY_BY_FULL_NAME,\n    LOAD_COUNTRY_BY_CODE,\n    LOAD_COUNTRY_BY_CURRENCY,\n    INPUT_COUNTRY_NAME,\n    CHANGE_PAGES,\n    CHANGE_COUNTRY_CHECKED,\n    CHANGE_LANGUAGES_STORAGE,\n    HOST,\n    GET_ENTITIES_IN_STORAGE\n} from '../constants'\n\n\nexport function loadCountryByShortName(str) {\n    return {\n        type: LOAD_COUNTRY_BY_NAME,\n        callAPI: `${HOST}name/${str}`\n    }\n}\n\nexport function loadCountryByFullName(str) {\n    return {\n        type: LOAD_COUNTRY_BY_FULL_NAME,\n        callAPI: `${HOST}name/${str}?fullText=true`\n    }\n}\n\nexport function loadCountryByCode(str) {\n    return {\n        type: LOAD_COUNTRY_BY_CODE,\n        payload: true,\n        callAPI: str.includes(';') ? `${HOST}alpha?codes=${str}` : `${HOST}alpha/${str}`\n    }\n}\n\nexport function loadCountryByCurrency(str) {\n    return {\n        type: LOAD_COUNTRY_BY_CURRENCY,\n        payload: true,\n        callAPI: `${HOST}currency/${str}`\n    }\n}\n\nexport function inputFiltratedByName(str) {\n    return {\n        type: INPUT_COUNTRY_NAME,\n        payload: str,\n    }\n}\n\nexport function changePages(page) {\n    return {\n        type: CHANGE_PAGES,\n        payload: page\n    }\n}\n\nexport function changeCountryChecked(country) {\n    return {\n        type: CHANGE_COUNTRY_CHECKED,\n        payload: country\n    }\n}\n\nexport function changeLanguageStorage(lang) {\n    return {\n        type: CHANGE_LANGUAGES_STORAGE,\n        payload: lang\n    }\n}\n\nexport function getEntitiesInLocalStorage(entities) {\n    return {\n        type: GET_ENTITIES_IN_STORAGE,\n        payload: entities\n    }\n}\n","export default ({\n    \"AF\": \"Afghanistan\",\n    \"AL\": \"Albania\",\n    \"DZ\": \"Algeria\",\n    \"AS\": \"American Samoa\",\n    \"AD\": \"Andorra\",\n    \"AO\": \"Angola\",\n    \"AI\": \"Anguilla\",\n    \"AG\": \"Antigua and Barbuda\",\n    \"AR\": \"Argentina\",\n    \"AM\": \"Armenia\",\n    \"AW\": \"Aruba\",\n    \"AU\": \"Australia\",\n    \"AT\": \"Austria\",\n    \"AZ\": \"Azerbaijan\",\n    \"BS\": \"Bahamas\",\n    \"BH\": \"Bahrain\",\n    \"BD\": \"Bangladesh\",\n    \"BB\": \"Barbados\",\n    \"BY\": \"Belarus\",\n    \"BE\": \"Belgium\",\n    \"BZ\": \"Belize\",\n    \"BJ\": \"Benin\",\n    \"BM\": \"Bermuda\",\n    \"BT\": \"Bhutan\",\n    \"BO\": \"Bolivia, Plurinational State of\",\n    \"BA\": \"Bosnia and Herzegovina\",\n    \"BW\": \"Botswana\",\n    \"BR\": \"Brazil\",\n    \"IO\": \"British Indian Ocean Territory\",\n    \"BG\": \"Bulgaria\",\n    \"BF\": \"Burkina Faso\",\n    \"BI\": \"Burundi\",\n    \"KH\": \"Cambodia\",\n    \"CM\": \"Cameroon\",\n    \"CA\": \"Canada\",\n    \"CV\": \"Cape Verde\",\n    \"KY\": \"Cayman Islands\",\n    \"CF\": \"Central African Republic\",\n    \"TD\": \"Chad\",\n    \"CL\": \"Chile\",\n    \"CN\": \"China\",\n    \"CO\": \"Colombia\",\n    \"KM\": \"Comoros\",\n    \"CG\": \"Congo\",\n    \"CD\": \"Democratic Republic of the Congo\",\n    \"CK\": \"Cook Islands\",\n    \"CR\": \"Costa Rica\",\n    \"CI\": \"Côte d'Ivoire\",\n    \"HR\": \"Croatia\",\n    \"CU\": \"Cuba\",\n    \"CW\": \"Curaçao\",\n    \"CY\": \"Cyprus\",\n    \"CZ\": \"Czech Republic\",\n    \"DK\": \"Denmark\",\n    \"DJ\": \"Djibouti\",\n    \"DM\": \"Dominica\",\n    \"DO\": \"Dominican Republic\",\n    \"EC\": \"Ecuador\",\n    \"EG\": \"Egypt\",\n    \"SV\": \"El Salvador\",\n    \"GQ\": \"Equatorial Guinea\",\n    \"ER\": \"Eritrea\",\n    \"EE\": \"Estonia\",\n    \"ET\": \"Ethiopia\",\n    \"FK\": \"Falkland Islands (Malvinas)\",\n    \"FO\": \"Faroe Islands\",\n    \"FJ\": \"Fiji\",\n    \"FI\": \"Finland\",\n    \"FR\": \"France\",\n    \"PF\": \"French Polynesia\",\n    \"GA\": \"Gabon\",\n    \"GM\": \"Gambia\",\n    \"GE\": \"Georgia\",\n    \"DE\": \"Germany\",\n    \"GH\": \"Ghana\",\n    \"GI\": \"Gibraltar\",\n    \"GR\": \"Greece\",\n    \"GL\": \"Greenland\",\n    \"GD\": \"Grenada\",\n    \"GU\": \"Guam\",\n    \"GT\": \"Guatemala\",\n    \"GG\": \"Guernsey\",\n    \"GN\": \"Guinea\",\n    \"GW\": \"Guinea-Bissau\",\n    \"HT\": \"Haiti\",\n    \"HN\": \"Honduras\",\n    \"HK\": \"Hong Kong\",\n    \"HU\": \"Hungary\",\n    \"IS\": \"Iceland\",\n    \"IN\": \"India\",\n    \"ID\": \"Indonesia\",\n    \"IR\": \"Iran, Islamic Republic of\",\n    \"IQ\": \"Iraq\",\n    \"IE\": \"Ireland\",\n    \"IM\": \"Isle of Man\",\n    \"IL\": \"Israel\",\n    \"IT\": \"Italy\",\n    \"JM\": \"Jamaica\",\n    \"JP\": \"Japan\",\n    \"JE\": \"Jersey\",\n    \"JO\": \"Jordan\",\n    \"KZ\": \"Kazakhstan\",\n    \"KE\": \"Kenya\",\n    \"KI\": \"Kiribati\",\n    \"KP\": \"North Korea\",\n    \"KR\": \"South Korea\",\n    \"KW\": \"Kuwait\",\n    \"KG\": \"Kyrgyzstan\",\n    \"LA\": \"Lao People's Democratic Republic\",\n    \"LV\": \"Latvia\",\n    \"LB\": \"Lebanon\",\n    \"LS\": \"Lesotho\",\n    \"LR\": \"Liberia\",\n    \"LY\": \"Libya\",\n    \"LI\": \"Liechtenstein\",\n    \"LT\": \"Lithuania\",\n    \"LU\": \"Luxembourg\",\n    \"MO\": \"Macao\",\n    \"MK\": \"Republic of Macedonia\",\n    \"MG\": \"Madagascar\",\n    \"MW\": \"Malawi\",\n    \"MY\": \"Malaysia\",\n    \"MV\": \"Maldives\",\n    \"ML\": \"Mali\",\n    \"MT\": \"Malta\",\n    \"MH\": \"Marshall Islands\",\n    \"MQ\": \"Martinique\",\n    \"MR\": \"Mauritania\",\n    \"MU\": \"Mauritius\",\n    \"MX\": \"Mexico\",\n    \"FM\": \"Micronesia, Federated States of\",\n    \"MD\": \"Republic of Moldova\",\n    \"MC\": \"Monaco\",\n    \"MN\": \"Mongolia\",\n    \"ME\": \"Montenegro\",\n    \"MS\": \"Montserrat\",\n    \"MA\": \"Morocco\",\n    \"MZ\": \"Mozambique\",\n    \"MM\": \"Myanmar\",\n    \"NA\": \"Namibia\",\n    \"NR\": \"Nauru\",\n    \"NP\": \"Nepal\",\n    \"NL\": \"Netherlands\",\n    \"NZ\": \"New Zealand\",\n    \"NI\": \"Nicaragua\",\n    \"NE\": \"Niger\",\n    \"NG\": \"Nigeria\",\n    \"NU\": \"Niue\",\n    \"NF\": \"Norfolk Island\",\n    \"MP\": \"Northern Mariana Islands\",\n    \"NO\": \"Norway\",\n    \"OM\": \"Oman\",\n    \"PK\": \"Pakistan\",\n    \"PW\": \"Palau\",\n    \"PS\": \"Palestinian Territory\",\n    \"PA\": \"Panama\",\n    \"PG\": \"Papua New Guinea\",\n    \"PY\": \"Paraguay\",\n    \"PE\": \"Peru\",\n    \"PH\": \"Philippines\",\n    \"PN\": \"Pitcairn\",\n    \"PL\": \"Poland\",\n    \"PT\": \"Portugal\",\n    \"PR\": \"Puerto Rico\",\n    \"QA\": \"Qatar\",\n    \"RO\": \"Romania\",\n    \"RU\": \"Russian\",\n    \"RW\": \"Rwanda\",\n    \"KN\": \"Saint Kitts and Nevis\",\n    \"WS\": \"Samoa\",\n    \"SM\": \"San Marino\",\n    \"ST\": \"Sao Tome and Principe\",\n    \"SA\": \"Saudi Arabia\",\n    \"SN\": \"Senegal\",\n    \"RS\": \"Serbia\",\n    \"SC\": \"Seychelles\",\n    \"SL\": \"Sierra Leone\",\n    \"SG\": \"Singapore\",\n    \"SX\": \"Sint Maarten\",\n    \"SK\": \"Slovakia\",\n    \"SI\": \"Slovenia\",\n    \"SB\": \"Solomon Islands\",\n    \"SO\": \"Somalia\",\n    \"ZA\": \"South Africa\",\n    \"SS\": \"South Sudan\",\n    \"ES\": \"Spain\",\n    \"LK\": \"Sri Lanka\",\n    \"SD\": \"Sudan\",\n    \"SR\": \"Suriname\",\n    \"SZ\": \"Swaziland\",\n    \"SE\": \"Sweden\",\n    \"CH\": \"Switzerland\",\n    \"SY\": \"Syria\",\n    \"TW\": \"Taiwan, Province of China\",\n    \"TJ\": \"Tajikistan\",\n    \"TZ\": \"Tanzania\",\n    \"TH\": \"Thailand\",\n    \"TG\": \"Togo\",\n    \"TK\": \"Tokelau\",\n    \"TO\": \"Tonga\",\n    \"TT\": \"Trinidad and Tobago\",\n    \"TN\": \"Tunisia\",\n    \"TR\": \"Turkey\",\n    \"TM\": \"Turkmenistan\",\n    \"TC\": \"Turks and Caicos Islands\",\n    \"TV\": \"Tuvalu\",\n    \"UG\": \"Uganda\",\n    \"UA\": \"Ukraine\",\n    \"AE\": \"United Arab Emirates\",\n    \"GB\": \"United Kingdom\",\n    \"US\": \"United States\",\n    \"UY\": \"Uruguay\",\n    \"UZ\": \"Uzbekistan\",\n    \"VU\": \"Vanuatu\",\n    \"VE\": \"Venezuela, Bolivarian Republic of\",\n    \"VN\": \"Viet Nam\",\n    \"VI\": \"Virgin Islands\",\n    \"YE\": \"Yemen\",\n    \"ZM\": \"Zambia\",\n    \"ZW\": \"Zimbabwe\"\n});","import React from 'react';\nimport countries from './countries';\nimport {Translate} from 'react-localize-redux';\nimport {TableCode} from '../css';\n\nfunction CountryCodeList() {\n    return (\n        <TableCode className=\"table table-striped\">\n            <thead>\n            <tr>\n                <th scope=\"col\">\n                    <Translate id=\"codeTable\"/>\n                </th>\n                <th scope=\"col\">\n                    <Translate id=\"countryTable\"/>\n                </th>\n            </tr>\n            </thead>\n            <tbody>\n            {Object.entries(countries).map(([code, country]) => (\n                <tr key={code}>\n                    <td>{code}</td>\n                    <td>{country}</td>\n                </tr>\n            ))}\n            </tbody>\n        </TableCode>\n    )\n}\n\nexport default CountryCodeList;","import React, {Component, Fragment} from 'react'\nimport {connect} from 'react-redux'\nimport {Redirect} from 'react-router-dom'\nimport {withLocalize, Translate} from 'react-localize-redux'\nimport {addTranslationsForActiveLanguage, getActiveLanguageInLocalStorage} from '../helpers'\nimport {ListWrap, CountryInfo, CountryFlag} from './css'\n\n\nclass Country extends Component {\n\n    componentDidUpdate(prevProps) {\n        const {activeLanguage, setActiveLanguage, addTranslationForLanguage} = this.props;\n        const activeLang = getActiveLanguageInLocalStorage();\n\n        addTranslationsForActiveLanguage(activeLanguage, addTranslationForLanguage);\n        if (activeLang && (prevProps.activeLanguage.code !== activeLang.code)) {\n            setActiveLanguage(activeLang.code);\n            addTranslationsForActiveLanguage(activeLang, addTranslationForLanguage);\n        }\n    }\n\n    render() {\n        const {country} = this.props;\n        if (!country)\n            return <Redirect to='/maxline'/>;\n\n        return (\n            <ListWrap>\n                {this.getBody()}\n            </ListWrap>\n        )\n    }\n\n    getBody() {\n        const {country} = this.props;\n\n        return (\n            <section>\n                <h2>\n                    <Translate id=\"countryTitleName\" data={{name: country.name}}>\n                        {'Country: ${name}'}\n                    </Translate>\n                </h2>\n                <CountryInfo display={country.name}>\n                    <Translate id={`country.name`}/>\n                    <b>{country.name}</b>\n                </CountryInfo>\n                <CountryFlag src={`${country.flag}`} alt=\"Preview\"/>\n                <br/>\n                <CountryInfo display={country.capital}>\n                    <Translate id={`country.capital`}/>\n                    <b>{country.capital}</b>\n                </CountryInfo>\n                <CountryInfo display={country.region}>\n                    <Translate id={`country.region`}/>\n                    <b>{country.region}</b>\n                </CountryInfo>\n                <CountryInfo display={country.subregion}>\n                    <Translate id={`country.subregion`}/>\n                    <b>{country.subregion}</b>\n                </CountryInfo>\n                <CountryInfo display={country.population}>\n                    <Translate id={`country.population`}/>\n                    <b>{country.population}</b>\n                </CountryInfo>\n                <CountryInfo display={country.demonym}>\n                    <Translate id={`country.demonym`}/>\n                    <b>{country.demonym}</b>\n                </CountryInfo>\n                <CountryInfo display={country.area}>\n                    <Translate id={`country.area`}/>\n                    <b>{country.area}</b>\n                </CountryInfo>\n                <CountryInfo display={country.gini}>\n                    <Translate id={`country.gini`}/>\n                    <b>{country.gini}</b>\n                </CountryInfo>\n                <CountryInfo display={country.nativeName}>\n                    <Translate id={`country.nativeName`}/>\n                    <b>{country.nativeName}</b>\n                </CountryInfo>\n                <CountryInfo display={country.numericCode}>\n                    <Translate id={`country.numericCode`}/>\n                    <b>{country.numericCode}</b>\n                </CountryInfo>\n                <CountryInfo display={country.timezones[0]}>\n                    <Translate id={`country.timezones`}/>\n                    {country.timezones.map((time, i) => (<b key={i}>{time}</b>))}\n                </CountryInfo>\n                <CountryInfo display={country.borders[0]}>\n                    <Translate id={`country.borders`}/>\n                    {country.borders.map((border, i) => (<b key={i}>{border},</b>))}\n                </CountryInfo>\n                <CountryInfo display={country.currencies[0]}>\n                    <Translate id={`country.currencies`}/>\n                    {country.currencies.map((currency, i) => (\n                        <b key={i}>{currency.code}, {currency.name}, {currency.symbol}</b>\n                    ))}\n                </CountryInfo>\n                <CountryInfo display={country.languages[0]}>\n                    <Translate id={`country.languages`}/>\n                    {country.languages.map((lang, i) => (\n                        <b key={i}>{lang.name}, {lang.nativeName}</b>\n                    ))}\n                </CountryInfo>\n                <CountryInfo display={Object.entries(country.translations).length}>\n                    <Translate id={`country.translations`}/>\n                    {Object.entries(country.translations).map(([k, v]) => (\n                        <Fragment key={k}><b>{k}: </b> {v}, </Fragment>\n                    ))}\n                </CountryInfo>\n                <CountryInfo display={country.regionalBlocs[0]}>\n                    <Translate id={`country.regionalBlocs`}/>\n                    {country.regionalBlocs.map((regional, i) => (\n                        <b key={i}>{regional.name}, </b>\n                    ))}\n                </CountryInfo>\n                <CountryInfo display={country.cioc}>\n                    <Translate id={`country.cioc`}/>\n                    <b>{country.cioc}</b>\n                </CountryInfo>\n            </section>\n        )\n    }\n}\n\nexport default connect((state, ownProps) => ({\n    country: state.countries.countries.find(c => c.id === ownProps.id),\n}))(withLocalize(Country))\n","import {createSelector} from 'reselect'\n\n\nconst filtersGetter = (state) => state.filters;\nconst filtersCountryGetter = (state) => state.filters.countryName;\nexport const countryNameSelector = createSelector(\n    filtersCountryGetter, countryName => countryName\n);\n\nconst countryGetter = (state) => state.countries.country;\nexport const countrySelector = createSelector(\n    countryGetter, country => country\n);\n\nconst countriesGetter = (state) => state.countries;\nexport const countriesSelector = createSelector(\n    countriesGetter, (countriesState) => {\n        const {countries} = countriesState;\n        return countries;\n    });\n\nconst loadingGetter = (state) => state.countries.loading;\nexport const loadingSelector = createSelector(loadingGetter, loading => loading);\nconst errorGetter = (state) => state.countries.error;\nexport const errorSelector = createSelector(errorGetter, error => error);\n\nexport const filtratedCountriesSelector = createSelector(\n    countriesGetter, filtersGetter, (countriesState, filters) => {\n        const {pagination} = filters;\n        const {countries} = countriesState;\n\n        return countries\n            .slice((pagination.page * pagination.pageSize) - pagination.pageSize,\n                pagination.page * pagination.pageSize)\n    });\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {Translate} from 'react-localize-redux'\nimport {\n    loadCountryByShortName,\n    loadCountryByFullName,\n    loadCountryByCode,\n    loadCountryByCurrency,\n    inputFiltratedByName,\n    getEntitiesInLocalStorage,\n    changeCountryChecked\n} from '../../AC'\nimport {getRequestInLocalStorage} from '../../helpers'\nimport {\n    countryNameSelector,\n    countrySelector,\n    filtratedCountriesSelector,\n    loadingSelector\n} from \"../../selectors\"\nimport {InputLabel, RadioGroup} from '../css'\n\nclass Input extends Component {\n\n    state = {\n        dispatch: this.props.loadCountryByShortName\n    }\n\n    handleLoadCountry = (e) => {\n        const {country, inputFiltratedByName, getEntitiesInLocalStorage} = this.props;\n        const str = e.target.value;\n\n        const request = getRequestInLocalStorage(str.toLowerCase(), country.type);\n        if (request && request.q === str.toLowerCase())\n            getEntitiesInLocalStorage(request.entities);\n        else if (typeof country.dispatch === \"function\")\n            country.dispatch(str);\n        else\n            this.state.dispatch(str);\n        inputFiltratedByName(str);\n    }\n\n    handleFilter = (key, country) => {\n        let dispatch;\n        const {loadCountryByShortName, loadCountryByFullName,\n            loadCountryByCode, loadCountryByCurrency, changeCountryChecked\n        } = this.props;\n\n        switch (key) {\n            case 'fullName':\n                dispatch = loadCountryByFullName;\n                country.type = 'LOAD_COUNTRY_BY_FULL_NAME_SUCCESS';\n                break;\n            case 'code':\n                dispatch = loadCountryByCode;\n                country.type = 'LOAD_COUNTRY_BY_CODE_SUCCESS';\n                break;\n            case 'currency':\n                dispatch = loadCountryByCurrency;\n                country.type = 'LOAD_COUNTRY_BY_CURRENCY_SUCCESS';\n                break;\n            default:\n                dispatch = loadCountryByShortName;\n                country.type = 'LOAD_COUNTRY_BY_NAME_SUCCESS';\n        }\n\n        country.isChecked = key;\n        country.dispatch = dispatch;\n        changeCountryChecked(country);\n        this.setState({dispatch})\n    }\n\n\n    render() {\n        const {country, countryName} = this.props;\n\n        return (\n            <div className=\"form-group\">\n                <InputLabel>\n                    <Translate id=\"inputCountryLabel\"/>\n                </InputLabel>\n\n                <RadioGroup>\n                    <label className=\"radio-inline\"\n                           onClick={() => this.handleFilter('shortName', country)}\n                    >\n                        <input type=\"radio\" name=\"optradio\" defaultChecked={country.isChecked === 'shortName'}/>\n                        <Translate id=\"shortCountryName\"/>\n                    </label>\n                    <label className=\"radio-inline\"\n                           onClick={() => this.handleFilter('fullName', country)}\n                    >\n                        <input type=\"radio\" name=\"optradio\" defaultChecked={country.isChecked === 'fullName'}/>\n                        <Translate id=\"fullCountryName\"/>\n                    </label>\n                    <label className=\"radio-inline\"\n                           onClick={() => this.handleFilter('code', country)}\n                    >\n                        <input type=\"radio\" name=\"optradio\" defaultChecked={country.isChecked === 'code'}/>\n                        <Translate id=\"codeCountry\"/>\n                        <code><Translate id=\"exampleCode\"/></code>\n                    </label>\n                    <label className=\"radio-inline\"\n                           onClick={() => this.handleFilter('currency', country)}\n                    >\n                        <input type=\"radio\" name=\"optradio\" defaultChecked={country.isChecked === 'currency'}/>\n                        <Translate id=\"currencyCountry\"/>\n                    </label>\n                </RadioGroup>\n\n                <input\n                    className=\"form-control\"\n                    type='text'\n                    value={countryName}\n                    placeholder={countryName || `Enter...`}\n                    onChange={this.handleLoadCountry}\n                />\n            </div>\n        )\n    }\n\n}\n\nexport default connect(state => ({\n    countryName: countryNameSelector(state),\n    country: countrySelector(state),\n    countries: filtratedCountriesSelector(state),\n    loading: loadingSelector(state),\n}), {\n    loadCountryByShortName,\n    loadCountryByFullName,\n    loadCountryByCode,\n    loadCountryByCurrency,\n    inputFiltratedByName,\n    getEntitiesInLocalStorage,\n    changeCountryChecked\n})(Input)","import React, {Component} from 'react'\nimport Pagination from 'react-js-pagination'\nimport {connect} from 'react-redux'\nimport {changePages} from '../../AC'\nimport {isIncludedSubstring} from '../../helpers'\nimport {countriesSelector, countryNameSelector, errorSelector} from '../../selectors'\n\nclass PaginationFilter extends Component {\n\n    handlePageChange = (page) => {\n        const {changePages, pagination} = this.props;\n        changePages({\n            page: page,\n            pageSize: pagination.pageSize\n        })\n    }\n\n    render() {\n        const {countries, countryName, pagination, error} = this.props;\n        if (error || countries.length <= 10) return null;\n        let countFiltratedByName = 0;\n\n        if (countryName) {\n            countFiltratedByName = countries.filter(item => {\n                return isIncludedSubstring(item.name, countryName)\n            }).length;\n        }\n\n        const total = !countryName ? countries.length : countFiltratedByName;\n\n        return (\n            <div>\n                <Pagination\n                    activePage={pagination.page}\n                    itemsCountPerPage={pagination.pageSize}\n                    totalItemsCount={total <= 0 ? 1 : total}\n                    onChange={this.handlePageChange}\n                />\n            </div>\n        );\n    }\n}\n\nexport default connect(state => ({\n    countries: countriesSelector(state),\n    countryName: countryNameSelector(state),\n    pagination: state.filters.pagination,\n    error: errorSelector(state),\n}), {changePages})(PaginationFilter)","import React from 'react'\nimport {Translate} from 'react-localize-redux'\nimport styled from 'styled-components'\n\nfunction Loader() {\n    return (\n        <Main>\n            <h2>\n                <Translate id=\"loading\" />\n            </h2>\n        </Main>\n    )\n}\n\nexport default Loader;\n\nconst Main = styled.div`\n  display: flex;\n  width: 350px;\n`","import React from 'react'\nimport {Translate} from 'react-localize-redux'\n\nfunction NotFound() {\n    return (\n        <h1>\n            <Translate id=\"notFound\" />\n        </h1>\n    );\n}\n\nexport default NotFound;\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {NavLink} from 'react-router-dom'\nimport {withLocalize, Translate} from 'react-localize-redux'\nimport { addTranslationsForActiveLanguage, getActiveLanguageInLocalStorage } from '../helpers'\nimport Input from './Filters/Input'\nimport Pagination from './Filters/Pagination'\nimport Loader from './common/Loader'\nimport NotFound from './common/NotFound'\nimport {filtratedCountriesSelector, loadingSelector} from '../selectors'\nimport {Title, Link, CountryInfo} from './css'\n\n\n\nclass Countries extends Component {\n\n    componentDidMount() {\n        const {setActiveLanguage, addTranslationForLanguage} = this.props;\n        const activeLang = getActiveLanguageInLocalStorage();\n\n        if (activeLang) {\n            setActiveLanguage(activeLang.code);\n            addTranslationsForActiveLanguage(activeLang, addTranslationForLanguage);\n        }\n    }\n\n    componentDidUpdate() {\n        const {activeLanguage, setActiveLanguage, addTranslationForLanguage} = this.props;\n        const activeLang = getActiveLanguageInLocalStorage();\n\n        addTranslationsForActiveLanguage(activeLanguage, addTranslationForLanguage);\n        if (activeLang && (activeLanguage.code !== activeLang.code)) {\n            setActiveLanguage(activeLang.code);\n            addTranslationsForActiveLanguage(activeLang, addTranslationForLanguage);\n        }\n    }\n\n    render() {\n        const {loading, countries} = this.props;\n        const loader = loading && <Loader/>;\n        const notFount = countries.length === 0 ? <NotFound/> : null;\n\n        const countryDetails = countries.map(country =>\n            <div key={country.id}>\n                <CountryInfo display={country.name}>\n                    <Translate id={`country.name`}/>\n                    <b>{country.name}</b>\n                </CountryInfo>\n                <CountryInfo display={country.capital}>\n                    <Translate id={`country.capital`}/>\n                    <b>{country.capital}</b>\n                </CountryInfo>\n                <Link as={NavLink} to={`/maxline/${country.id}`}>\n                    <Translate id={`countryLink`}/>\n                </Link>\n                <hr/>\n            </div>\n        );\n\n        return (\n            <div>\n                <Title primary>\n                    <Translate id=\"title\" />\n                </Title>\n                <Input />\n                <Link as={NavLink} to={`/maxline/codes`}>\n                    <Translate id=\"listOfCodes\"/>\n                </Link>\n                <hr/>\n\n                {!loading && <div>\n                    <div>\n                        {countryDetails}\n                    </div>\n                    {notFount}\n                </div>}\n                {loader}\n\n                <Pagination />\n            </div>\n        )\n    }\n}\n\nexport default connect(state => ({\n    countries: filtratedCountriesSelector(state),\n    loading: loadingSelector(state),\n}))(withLocalize(Countries))\n\n","import React, {Component} from 'react'\nimport {Route, Switch} from 'react-router-dom'\nimport {withLocalize} from 'react-localize-redux'\nimport LanguageToggle from './common/LanguageToggle'\nimport {reducerLangState} from '../reducer/languages'\nimport {getLocalStorage} from '../helpers'\nimport CountryCodeList from './Filters/CountryCode'\nimport Country from './Country'\nimport Countries from './Countries'\nimport {Main} from './css'\n\n\nclass Routes extends Component {\n    constructor(props) {\n        super(props);\n        const activeStorageLang = getLocalStorage('lang');\n        localStorage.removeItem('request');\n\n        if (activeStorageLang) {\n            reducerLangState.languages = activeStorageLang;\n            this.props.initialize(reducerLangState);\n        } else {\n            this.props.initialize(reducerLangState);\n        }\n    }\n\n    getIndex = ({match}) => {\n        const {id} = match.params;\n        return <Country id={id} key={id}/>\n    };\n\n    countries = () => <Countries/>;\n    getListOfCodes = () => <CountryCodeList/>;\n\n    render() {\n        return (\n            <Main>\n                <LanguageToggle/>\n                <Switch>\n                    <Route path=\"/maxline\" render={this.countries} exact/>\n                    <Route path=\"/maxline/codes\" render={this.getListOfCodes} exact/>\n                    <Route path=\"/maxline/:id\" render={this.getIndex}/>\n                </Switch>\n            </Main>\n        )\n    }\n}\n\nexport default withLocalize(Routes);\n","import React from 'react'\nimport store from '../store'\nimport {Provider} from 'react-redux'\nimport Routes from './Routes'\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport {LocalizeProvider} from 'react-localize-redux'\nimport {Wrap} from './css'\n\n\nfunction App() {\n    return (\n        <Wrap className=\"container-fluid\">\n            <LocalizeProvider>\n                <Router>\n                    <Provider store={store}>\n                        <div>\n                            <Route path=\"/maxline\" component={Routes}/>\n                        </div>\n                    </Provider>\n                </Router>\n            </LocalizeProvider>\n        </Wrap>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}